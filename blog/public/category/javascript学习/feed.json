{
    "version": "https://jsonfeed.org/version/1",
    "title": "盧瞳Blog • All posts by \"javascript学习\" category",
    "description": "",
    "home_page_url": "http://blog.1think2program.cn",
    "items": [
        {
            "id": "http://blog.1think2program.cn/2023/07/12/JavaScript%E5%AD%A6%E4%B9%A0/js%E5%AE%9E%E6%88%98%E5%B0%8F%E8%AF%B4%E7%88%AC%E8%99%AB/",
            "url": "http://blog.1think2program.cn/2023/07/12/JavaScript%E5%AD%A6%E4%B9%A0/js%E5%AE%9E%E6%88%98%E5%B0%8F%E8%AF%B4%E7%88%AC%E8%99%AB/",
            "title": "js",
            "date_published": "2023-07-12T13:36:17.000Z",
            "content_html": "<h2 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h2><h3 id=\"网页gbk乱码处理\"><a href=\"#网页gbk乱码处理\" class=\"headerlink\" title=\"网页gbk乱码处理\"></a>网页gbk乱码处理</h3><blockquote>\n<p>使用 axios 请求 gbk 编码的网站，将会出现乱码，原因很简单，node 默认字符编码为 utf8，如果要正常显示 gbk 数据的话就需要将 gbk 转 utf8 格式。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> iconv <span class=\"keyword\">from</span> <span class=\"string\">&#x27;iconv-lite&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">axios</span><br><span class=\"line\">  .<span class=\"title function_\">get</span>(<span class=\"string\">`https://www.ip138.com/`</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">responseType</span>: <span class=\"string\">&#x27;arraybuffer&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">transformResponse</span>: [</span><br><span class=\"line\">      <span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iconv.<span class=\"title function_\">decode</span>(data, <span class=\"string\">&#x27;gbk&#x27;</span>)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res.<span class=\"property\">data</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 或者使用async 和 await</span></span><br><span class=\"line\"> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">request</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> axios</span><br><span class=\"line\">        .<span class=\"title function_\">get</span>(url, &#123;</span><br><span class=\"line\">            <span class=\"attr\">responseType</span>: <span class=\"string\">&#x27;arraybuffer&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">transformResponse</span>: [</span><br><span class=\"line\">                <span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> iconv.<span class=\"title function_\">decode</span>(data, <span class=\"string\">&#x27;gbk&#x27;</span>)</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.<span class=\"property\">data</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者不使用<code>transformResponse</code>，在响应结束后使用<code>iconv.decode(res.data, &#39;gbk&#39;)</code>，使用<code>transformResponse</code>相对优雅一点。</p>\n<p>如果返回的是 json 格式的话，可以直接JSON.parse转为 json 对象（前提得确保是 json 格式，不然解析报错）</p>\n<p><code>return JSON.parse(iconv.decode(data, &#39;gbk&#39;))</code></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWl6dW8uY24vZG9jcy9heGlvcy1yZXF1ZXN0LWdiay1wYWdlLWVuY29kaW5nLXNvbHV0aW9uLw==\">原文链接</span></p>\n",
            "tags": [
                "js",
                "node"
            ]
        },
        {
            "id": "http://blog.1think2program.cn/2023/07/12/JavaScript%E5%AD%A6%E4%B9%A0/JavaScript%E7%9A%84Es6/",
            "url": "http://blog.1think2program.cn/2023/07/12/JavaScript%E5%AD%A6%E4%B9%A0/JavaScript%E7%9A%84Es6/",
            "title": "JavaScript的Es6",
            "date_published": "2023-07-12T03:32:41.000Z",
            "content_html": "<h2 id=\"变量和常量-块作用域\"><a href=\"#变量和常量-块作用域\" class=\"headerlink\" title=\"变量和常量, 块作用域\"></a>变量和常量, 块作用域</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>使用<code>let</code>进行变量声明</p>\n<h3 id=\"块作用域\"><a href=\"#块作用域\" class=\"headerlink\" title=\"块作用域\"></a>块作用域</h3><p>使用<code>&#123;&#125;</code>包裹代表一个代码块, 来隔绝作用域</p>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>使用<code>const</code>声明, 建议常量名使用大写来标注</p>\n<h2 id=\"模板字符窜\"><a href=\"#模板字符窜\" class=\"headerlink\" title=\"模板字符窜\"></a>模板字符窜</h2><p>用法介绍</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用&quot; `` &quot; 来包裹 而使用 $&#123;变量名&#125; 来引入变量值 , 另外其允许跨行内容</span><br><span class=\"line\"></span><br><span class=\"line\">例如:</span><br><span class=\"line\"></span><br><span class=\"line\">const STR1 = &quot;hello&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">const STR2 = `STR1的内容是:$&#123;STR1&#125;</span><br><span class=\"line\">下面也是STR2的内容`</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解构和赋值\"><a href=\"#解构和赋值\" class=\"headerlink\" title=\"解构和赋值\"></a>解构和赋值</h2><blockquote>\n<p>适用于: 数组, 对象</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果:</span></span><br><span class=\"line\"><span class=\"comment\">    a=1, b=2, c=3</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;username, <span class=\"attr\">age</span>: userAge&#125; = &#123;</span><br><span class=\"line\">    <span class=\"attr\">username</span>: <span class=\"string\">&#x27;盧瞳&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;man&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果:</span></span><br><span class=\"line\"><span class=\"comment\">    username=&#x27;盧瞳&#x27;, userAge=18</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">// 这个例子中, 我们分别把下面对象中&#x27;username&#x27;和&#x27;age&#x27;对应的值赋值给变量, </span></span><br><span class=\"line\"><span class=\"comment\">// 在把age赋值时我们还尝试传入了userAge这个新的变量名</span></span><br></pre></td></tr></table></figure>\n\n<p><code>...</code>剩余项展开符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;username, <span class=\"attr\">age</span>: userAge, ...others&#125; =&#123;</span><br><span class=\"line\">    <span class=\"attr\">username</span>: <span class=\"string\">&#x27;盧瞳&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;man&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">category</span>: <span class=\"string\">&#x27;user&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果:</span></span><br><span class=\"line\"><span class=\"comment\">    username=&#x27;盧瞳&#x27;, userAge=18, others = &#123;gender: &#x27;man&#x27;,category: &#x27;user&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组和对象的扩展\"><a href=\"#数组和对象的扩展\" class=\"headerlink\" title=\"数组和对象的扩展\"></a>数组和对象的扩展</h2><h3 id=\"扩展运算符\"><a href=\"#扩展运算符\" class=\"headerlink\" title=\"扩展运算符\"></a>扩展运算符</h3><p>语法<code>...对象名/数组名</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = [...a, ...b]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果:</span></span><br><span class=\"line\"><span class=\"comment\">    c=[1,2,3,4,5,6]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>对象的扩展运算符使用方法类似</p>\n<h3 id=\"数组方法Array-from\"><a href=\"#数组方法Array-from\" class=\"headerlink\" title=\"数组方法Array.from()\"></a>数组方法<code>Array.from()</code></h3><p><code>Array.from()</code> 将伪数组转化为真实数组</p>\n<h3 id=\"对象的方法Object-assign\"><a href=\"#对象的方法Object-assign\" class=\"headerlink\" title=\"对象的方法Object.assign\"></a>对象的方法<code>Object.assign</code></h3><p><code>Object.assign</code>进行对象的浅拷贝, 或对象的功能合并</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> objA = &#123;</span><br><span class=\"line\">    name=<span class=\"string\">&quot;...&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> objB = &#123;</span><br><span class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;man&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> objC = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, objA, objB)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自定义方法, 直接写 ,不需要逗号</span></span><br><span class=\"line\">    <span class=\"title function_\">instruduce</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`我的名字是$(this.name), 我今年$(this.age)岁了.`</span>);</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a1 = <span class=\"keyword\">new</span> <span class=\"title function_\">A</span>(<span class=\"string\">&#x27;...&#x27;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类的继承</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age, gender</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(name, age); <span class=\"comment\">// 记得需要super调用父类构造方法</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">gender</span> = gender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 普通</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getSum1 = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n+<span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 箭头函数简写</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getSun1</span> = n =&gt; n+<span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//格式为</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> 变量名 = <span class=\"function\">(<span class=\"params\">参数一, 参数二</span>) =&gt;</span> 返回值表达式 <span class=\"comment\">// 不需要你return</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> 变量名 = <span class=\"function\">(<span class=\"params\">参数一, 参数二</span>) =&gt;</span> &#123;&#125; <span class=\"comment\">// 执行复杂逻辑, 自己return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// REST参数, 收集最后传入其他的没有使用的参数, 并保存为数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">print</span> = (<span class=\"params\">a, b , ...other</span>) =&gt; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a, b, other)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise-Async-异步-和-同步\"><a href=\"#Promise-Async-异步-和-同步\" class=\"headerlink\" title=\"Promise  Async 异步 和 同步\"></a>Promise  Async 异步 和 同步</h2><blockquote>\n<p>常见的异步任务 : 定时器 , Ajax</p>\n</blockquote>\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><p>基本结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行异步任务代码</span></span><br><span class=\"line\">    <span class=\"comment\">// Promise 设置了俩个函数 resolve 和 reject</span></span><br><span class=\"line\">    <span class=\"comment\">// 若果异步任务成功, 那么你需要调用 resolve, 它可以接受参数</span></span><br><span class=\"line\">    <span class=\"comment\">// 若果失败, 需要调用 reject 它同样接收一个参数</span></span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(&#123;<span class=\"attr\">state</span>: <span class=\"string\">&quot;success&quot;</span>&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 异步调用成功, 即resolve被调用的情况下会执行then, 并将传入resolve的数据带回</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 异步失败, 调用catch, 传入reject接受到的数据</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>多个异步任务的示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行异步任务代码</span></span><br><span class=\"line\">    <span class=\"comment\">// Promise 设置了俩个函数 resolve 和 reject</span></span><br><span class=\"line\">    <span class=\"comment\">// 若果异步任务成功, 那么你需要调用 resolve, 它可以接受参数</span></span><br><span class=\"line\">    <span class=\"comment\">// 若果失败, 需要调用 reject 它同样接收一个参数</span></span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(&#123;<span class=\"attr\">state</span>: <span class=\"string\">&quot;任务一 success&quot;</span>&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 异步调用成功, 即resolve被调用的情况下会执行then, 并将传入resolve的数据带回</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 执行异步任务代码</span></span><br><span class=\"line\">        <span class=\"comment\">// Promise 设置了俩个函数 resolve 和 reject</span></span><br><span class=\"line\">        <span class=\"comment\">// 若果异步任务成功, 那么你需要调用 resolve, 它可以接受参数</span></span><br><span class=\"line\">        <span class=\"comment\">// 若果失败, 需要调用 reject 它同样接收一个参数</span></span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(&#123;<span class=\"attr\">state</span>: <span class=\"string\">&quot;任务二 success&quot;</span>&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// data = &#123;state: &quot;任务二 success&quot;&#125;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 异步失败, 调用catch, 传入reject接受到的数据</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果前面任务失败了, 那么记得在错误处理函数最后抛出一个异常, </span></span><br><span class=\"line\"><span class=\"comment\">// 来终止后续异步任务的执行 使用 throw new Erro(&#x27;错误信息&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">// 或者你可以return 一个失败的Promise 对象</span></span><br></pre></td></tr></table></figure>\n\n<p><code>then()</code> 函数其实接受两个函数作为参数, 第一个为成功时调用, 第二个为失败时调用, 如果没有第二个参数, 那么会找他下面的<code>catch</code>执行</p>\n<h3 id=\"Async\"><a href=\"#Async\" class=\"headerlink\" title=\"Async\"></a>Async</h3><blockquote>\n<p>Async是基于Promise的简化方式</p>\n</blockquote>\n<p>Async 需要搭配关键字 await</p>\n<p>使用流程 :</p>\n<ol>\n<li><p>准备一个返回Promise对象的函数</p>\n</li>\n<li><p>为使用await的函数添加async</p>\n</li>\n<li><p>在添加了async的函数里面 调用 步骤一函数前 添加 await</p>\n</li>\n</ol>\n<p>简单理解 : 用async标注我要使用async了, 之后用 await 标明需要等待这个异步任务完成</p>\n<h2 id=\"Proxy-代理对象\"><a href=\"#Proxy-代理对象\" class=\"headerlink\" title=\"Proxy 代理对象\"></a>Proxy 代理对象</h2><p>不常用,但是是一些框架的实现原理的一个支撑</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\">target, property, receiver</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// target: 数据对象 这里 obj</span></span><br><span class=\"line\">        <span class=\"comment\">// property: 属性名</span></span><br><span class=\"line\">        <span class=\"comment\">// receiver: 当前使用的Proxy实例</span></span><br><span class=\"line\">        <span class=\"comment\">// 将在获取obj内容的时候自动触发</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">set</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将在更改obj内容的时候自动触发</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 还有其他函数, 请查阅mdn的文档</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>其他细节懒得写了,  有需要去用vue吧,现在还懒得去了解他们的原理</p>\n<h2 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h2><p>将不同类型的功能放在不同的文件中, 一个文件为一个模块</p>\n<p>关于js中的模块有两种引入方式的标准 :</p>\n<ul>\n<li><p>ESM 只能在浏览器</p>\n</li>\n<li><p>CommonJs 只能在Node.js</p>\n</li>\n</ul>\n<h3 id=\"ESModule\"><a href=\"#ESModule\" class=\"headerlink\" title=\"ESModule\"></a>ESModule</h3><p>进行模块导入前, 需要先进行导出</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js 文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ESM有俩种导出</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 自定义导出</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> aTitle = <span class=\"string\">&quot;这是A的标题&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">aFn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认导出 , 将所有需要导出的封如新的对象,然后导出</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里写需要导出的内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>导入操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js 文件</span></span><br><span class=\"line\"><span class=\"comment\">/* 注意 当你通过script标签引入一个文件并且它使用了模块功能</span></span><br><span class=\"line\"><span class=\"comment\">   你需要加一个type=&quot;moudle&quot;属性</span></span><br><span class=\"line\"><span class=\"comment\">    例如此处:</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;script src=&quot;index.js&quot; type=&quot;moudle&quot;&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对于默认的导出, 这里moudleA 为任意变量名, 他之后会被赋值为你在defaule导出的对象</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> moudleA <span class=\"keyword\">from</span> <span class=\"string\">&quot;./a&quot;</span> <span class=\"comment\">// 可以省略js后缀</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对于自定义的导出, 需要进行解构, 此外使用as可以起别名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; aTitle, aFun <span class=\"keyword\">as</span> aFunction &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./a&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CommonJs\"><a href=\"#CommonJs\" class=\"headerlink\" title=\"CommonJs\"></a>CommonJs</h3><p>导出</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// b.js 文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// commonjs需要统一导出</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">bTitle</span>: <span class=\"string\">&quot;这是b的标题&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">bFun</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 你还可以分开导出, 不用统一写, 效果一样</span></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">bTitle</span> = <span class=\"string\">&quot;这是b的标题&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>导入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js 文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleB = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./b&#x27;</span>)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "js",
                "es6",
                "前端"
            ]
        },
        {
            "id": "http://blog.1think2program.cn/2023/07/12/JavaScript%E5%AD%A6%E4%B9%A0/%E6%A0%87%E5%87%86Js%E5%9F%BA%E7%A1%80/",
            "url": "http://blog.1think2program.cn/2023/07/12/JavaScript%E5%AD%A6%E4%B9%A0/%E6%A0%87%E5%87%86Js%E5%9F%BA%E7%A1%80/",
            "title": "标准Js基础",
            "date_published": "2023-07-12T01:34:31.000Z",
            "content_html": "<p>这篇学习总结笔记, 将讨论标准ECMAScript的js, 并不包含包含浏览器提供的一些API</p>\n<span id=\"more\"></span>\n\n<h2 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h2><blockquote>\n<p> 简单罗列不会细说</p>\n</blockquote>\n<p>Js基础的知识点大概包括有:</p>\n<ul>\n<li><p>基本数据类型</p>\n<ul>\n<li>Integer </li>\n<li>String</li>\n<li>undefined</li>\n<li>null</li>\n<li>bool</li>\n</ul>\n</li>\n<li><p>运算符</p>\n<ul>\n<li><p>数学运算符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+</span><br><span class=\"line\">-</span><br><span class=\"line\">*</span><br><span class=\"line\">/</span><br><span class=\"line\">%</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较运算符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; </span><br><span class=\"line\">&lt;</span><br><span class=\"line\">&gt;=</span><br><span class=\"line\">&lt;=</span><br><span class=\"line\">==</span><br><span class=\"line\">===</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>语句</p>\n<ul>\n<li><p>条件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if()&#123;&#125;else&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if()&#123;&#125;else if()&#123;&#125;else&#123;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>循环</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(初始值;判断条件;更改初始值)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">forEach(function(item, index)&#123;&#125;)  // 一般用来遍历数组</span><br><span class=\"line\"></span><br><span class=\"line\">for(var i in obj)&#123;&#125;  // 一般用来遍历对象</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function()&#123;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组</p>\n</li>\n<li><p>对象</p>\n</li>\n</ul>\n<h2 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h2><p>有关数组对象方法的详细说明请查看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9HdWlkZS9JbmRleGVkX2NvbGxlY3Rpb25zIyVFNiU5NSVCMCVFNyVCQiU4NCVFNiU5NiVCOSVFNiVCMyU5NQ==\">索引集合类 - JavaScript | MDN</span></p>\n",
            "tags": [
                "js",
                "前端"
            ]
        }
    ]
}